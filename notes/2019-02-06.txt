#Goals for today:

1. Get a working version of MergeLines (or MergeVertices?) up and running



##Sidequest -- getting a console to view output from printf
---------------------------------------------------------
I started the day with setting up a console and redirecting the stdout to it. It was actually
really simple to do so, just to use AllocConsole/FreeConsole and redirecting the output with
a call: freopen_s(FILE, "CONOUT$", "w", stdout);
This way I can print debug stuff from files wich do not have access to Windows stuff (oop_stl
for instance).



##1. MergeLines (or MergeVertices)
--------------------------------
The reason for wanting to merge the lines is to reduce the size of the data. We still want to
spend only one draw call in the rendering of the lines, so we'll have to keep that in mind as
well.

In order to use poly lines we need to change the data structures a bit; instead of having one
list which stores all the line segments (two vertices per line segment) we'll divide it into
two buffers: one that stores all the vertices (unique) and one that stores the indices for
each poly line. 
We will store _all_ the vertices and indices in one buffer per level, meaning that we'll have
>=1 poly line per buffer. In order to render this with one draw call we need to tell the API
when to re-start the primitive. This is known as "primitive restart" and specifically 
"primitive restart index". Eying trough the documentation for OpenGL, Metal and DirectX I can
tell that they all have this feature. Also, they seem to agree upon which index to use:
the largest possible integer for the data type used for the indices, i.e.:
  for 16 bit integer: 0xFFFF (which we'll use).

Also, it seems like there is a possiblity to change the value for the primitive restart index 
(at least for OpenGL, see  glPrimitiveRestartIndex).

Sources:
https://www.khronos.org/opengl/wiki/Vertex_Rendering#Primitive_Restart
https://developer.apple.com/documentation/metal/mtlrendercommandencoder/1515542-drawindexedprimitives
https://docs.microsoft.com/en-us/windows/desktop/direct3d11/d3d10-graphics-programming-guide-primitive-topologies

We're storing the line segments in a vector, and each line segment consist of two v2's. This
changes to storing two vectors; one which is the same as before and one vector which stores a
new struct: line_point. This struct stores two v2's (copies of the vertices for each line
segment and an index -- an index into the line segment vector, which identifies which line
segment the vertices belongs to.
This is probably not particulary optimal. There are perhaps other ways of doing this in order
to reduce the footprint, but those optimisations will have to wait a bit.



###Two pass solution
------------------
The plan is to firstly do it in two steps (will most likely be reduced into one step later):
1. Polylines
   Sort the vertices and iterate through them. When two vertices are equal, I know that they 
   belong to lines that are connected. This way we'll create polylines.

2. Vertex melding
   if two connected lines have the same slope then we could skip the vertex in between.
   x--x--x could be reduced to x-----x and thus be reduced by one vertex. This is what could 
   be called "vertex melding".

   When we generated the line segments, we made sure to generate them such way so that the 
   normal is pointing in the right direct, or in other words: we stored them in a correct 
   direction. This will help us when we calculate the slopes. We'll I guess that "correct" is 
   a matter of definition, the important bit is that we saved the line segments consistently 
   in the same way. Thus the calculation of the slopes will also be consistent.

We need to take this step by step, at first we'll change to using index buffer and let's try
that first. Then it will be trivial to troubleshoot the change; we expect the rendered
results to be exactly the same. If we would have made a lot of changes at once then it could
possibly be very complicated to pin down any potential issue.

Next, let's keep the two pass solution seperate from the main algorithm for now. This means 
that we'll need to save a lot of additional data (one vector with the line_segment and one
map with vectors of line_point). This is far from optimal but could (and should) be fixed
later. For now it means that:
- You can choose if you would like the simplification to run or not
- A bit more easy to debug, i.e. we know that the main algorithm is alright so if there are
any issue, that issue would be in the Simplify method.
  I guess that we could re-generate the needed data (the vector with the line_segment and 
the map with vectors of line_point in the level struct) in the Simplify method, which
would reduce the data footprint somewhat. But we will probably collapse the two methods into
one at a later stage so we won't bother with that for now.