#Goals of the day:

1. Fixing two bugs:

   a) If the window is moved partly outside of the screen and then back, the part of the
      window that was outside the screen is not re-rendered until the mouse button is
      released

   b) The volcano.txt data set is not working, the algorithm produces no levels?

2. Calculate metrics and use it for text layout and to determine at level of detail 
   (i.e. one label for every point or labels on every second point, etc..?)

3. Make it optional for the class to "own" the data? Make it possible to use external
   data as input.


##1. Fixing two bugs
------------------

###1a. Window not rendering properly
The rendering is done outside of the WM_PAINT message, actually I was expecting that the
rendering is all the time. But thinking about it makes me realise that we do loop based
on PeekMessage, that is, if we _always_ recieve a WM message then we will not render.

###Hypothesis: when we move the window, we do recieve a consistent stream of WM_MOVE 
(and possibly related WM_S). Thus we're not exiting the loop around PeekMessage and as a
result we're not rendering anything.

###Test: print a count of the number of times we recieve the WM_MOVE message and a count 
of how many times we are rendering. If the WM_MOVE count is increasing all time but not 
the rendering count, then we know for sure that we're not rendering.

###Result: Yeah, we're definitely not rendering. The rendercount is not increasing but 
the WM_MOVE counter was increasing. However, it seems like it's not only WM_MOVE 
messages; if we're "holding" on to the window, left mouse button pressed on the window's 
titlebar, we're not rendering, but we're not receiving WM_MOVE either. So there is some 
other message as well that's being sent.

Solution: We could probably use WM_ENTERSIZEMOVE/WM_EXITSIZEMOVE, when the Window is 
entering a modal loop, we're informed of this via WM_ENTERSIZEMOVE. At this point it is
probably reasonably to pause the app and start a timer that will keep on rendering to 
the window (we're not going through the usual render path). This timer will be killed in
WM_EXITSIZEMOVE folloed by unpausing the app.
But then we need some way of rendering without going through the usual render path, it
seems like this will have to wait until the DirectX code have been collapsed and moved
into it's own thing.


###1b. Not producing any results with the volcano data set
Well... This is a bit akward, I forgot to change the cell count, it was till 5x5 which
is too small for the volcano data set...



##2. Calculate metrics and use it for text layout
-----------------------------------------------
Instead of using metrics and logic, I simply let the user decide on how to do it.
Key:
  L  : switches text rendering on or off. The
  C  : the label will contain coordinates
  1-9: 1 will render a label at every data point, 2 will render a label at every second
       data point, etc...